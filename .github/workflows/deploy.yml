name: Build and Deploy Origin System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'vultr'
        type: choice
        options:
          - vultr
          - aws
          - azure
          - gcp

jobs:
  build-origin:
    runs-on: [self-hosted, Linux, Docker, X64, builder]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Vultr Container Registry
      run: |
        echo "${{ secrets.VULTR_REGISTRY_PASSWORD }}" | docker login registry.vultr.dndnordic.com -u ${{ secrets.VULTR_REGISTRY_USERNAME }} --password-stdin
    
    - name: Build and push Origin Docker image
      run: |
        docker build -t registry.vultr.dndnordic.com/origin:latest -t registry.vultr.dndnordic.com/origin:${{ github.sha }} .
        docker push registry.vultr.dndnordic.com/origin:latest
        docker push registry.vultr.dndnordic.com/origin:${{ github.sha }}
  
  build-origin-components:
    runs-on: [self-hosted, Linux, Docker, X64, builder]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Vultr Container Registry
      run: |
        echo "${{ secrets.VULTR_REGISTRY_PASSWORD }}" | docker login registry.vultr.dndnordic.com -u ${{ secrets.VULTR_REGISTRY_USERNAME }} --password-stdin
    
    - name: Build and push Origin Components
      run: |
        # Build governance component from source directly
        mkdir -p governance-build
        cp -r src/governance governance-build/
        cp requirements.txt governance-build/
        
        cat > governance-build/Dockerfile << EOF
        FROM python:3.10-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        CMD ["python", "-m", "governance.governance_manager"]
        EOF
        
        docker build -t registry.vultr.dndnordic.com/origin-governance:latest -t registry.vultr.dndnordic.com/origin-governance:${{ github.sha }} ./governance-build
        docker push registry.vultr.dndnordic.com/origin-governance:latest
        docker push registry.vultr.dndnordic.com/origin-governance:${{ github.sha }}
        
        # Clean up
        docker image prune -f
        rm -rf governance-build
    
  deploy:
    needs: [build-origin, build-origin-components]
    runs-on: [self-hosted, Linux, Docker, X64, builder]
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Kubernetes tools
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
        # Install envsubst if not available
        which envsubst || sudo apt-get update && sudo apt-get install -y gettext-base
    
    - name: Set Kubernetes Context
      run: |
        # Create .kube directory
        mkdir -p $HOME/.kube
        
        # Write kubeconfig content from secret
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
        # Test connection to cluster
        kubectl config get-contexts
        kubectl config use-context vultr-k8s
        
    - name: Create k8s-secrets.env
      run: |
        cat > k8s-secrets.env << EOF
        GITHUB_TOKEN_BASE64=$(echo -n "${{ secrets.GITHUB_TOKEN }}" | base64 -w 0)
        GITHUB_WEBHOOK_SECRET_BASE64=$(echo -n "${{ secrets.GITHUB_WEBHOOK_SECRET }}" | base64 -w 0)
        MIKAEL_AUTH_TOKEN_BASE64=$(echo -n "${{ secrets.MIKAEL_AUTH_TOKEN }}" | base64 -w 0)
        DND_GENESIS_GITHUB_TOKEN_BASE64=$(echo -n "${{ secrets.DND_GENESIS_GITHUB_TOKEN }}" | base64 -w 0)
        GITHUB_RUNNER_TOKEN_BASE64=$(echo -n "${{ secrets.GITHUB_RUNNER_TOKEN }}" | base64 -w 0)
        VULTR_REGISTRY_AUTH_BASE64=$(echo -n "${{ secrets.VULTR_REGISTRY_AUTH_BASE64 }}" | base64 -w 0)
        VULTR_REGISTRY_CONFIG_BASE64=${{ secrets.VULTR_REGISTRY_CONFIG_BASE64 }}
        EOF
    
    - name: Deploy to Kubernetes
      run: |
        # Export environment variables for secrets substitution
        export $(cat k8s-secrets.env | xargs)
        
        # Apply namespace first
        kubectl apply -f kubernetes/namespace.yaml
        
        # Apply secrets
        envsubst < kubernetes/secrets.yaml | kubectl apply -f -
        envsubst < kubernetes/registry-credentials.yaml | kubectl apply -f -
        
        # Deploy using kustomize
        kubectl apply -k kubernetes/cloud-providers/${{ github.event.inputs.environment || 'vultr' }}
        
        # Verify deployment
        kubectl rollout status deployment/origin -n governance-system --timeout=180s
    
    - name: Clean up secrets
      if: always()
      run: |
        rm -f k8s-secrets.env