name: Governance Analysis of PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  
  # Add manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number to analyze'
        required: true
        type: number

jobs:
  analyze-pr:
    name: Analyze Pull Request
    runs-on: [self-hosted, Linux, Docker, X64, builder]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full git history
      
      - name: Set up Python and dependencies
        run: |
          # Install Python 3.10 if not already installed
          if ! command -v python3.10 &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository -y ppa:deadsnakes/ppa
            sudo apt-get update
            sudo apt-get install -y python3.10 python3.10-venv python3.10-dev python3-pip
          fi
          
          # Create symlinks if needed
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 || true
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 || true
          
          # Install pip packages
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      
      - name: Get PR Information
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        run: |
          echo "Getting PR information for #${PR_NUMBER}..."
          PR_DATA=$(gh pr view ${PR_NUMBER} --json title,author,baseRefName,headRefName,files,body)
          echo "PR_TITLE=$(echo $PR_DATA | jq -r '.title')" >> $GITHUB_ENV
          echo "PR_AUTHOR=$(echo $PR_DATA | jq -r '.author.login')" >> $GITHUB_ENV
          echo "PR_BASE=$(echo $PR_DATA | jq -r '.baseRefName')" >> $GITHUB_ENV
          echo "PR_HEAD=$(echo $PR_DATA | jq -r '.headRefName')" >> $GITHUB_ENV
          echo "PR_CHANGED_FILES=$(echo $PR_DATA | jq -r '.files | length')" >> $GITHUB_ENV
          
          # Create temp file with PR details for LLM analysis
          echo "$PR_DATA" > /tmp/pr_data.json

      - name: Get PR Diff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        run: |
          echo "Getting PR diff..."
          gh pr diff ${PR_NUMBER} > /tmp/pr_diff.txt
      
      - name: Analyze PR with LLM
        id: llm_analysis
        run: |
          # Set up LLM Ingest Server connection via Tailscale
          export LLM_INGEST_SERVER_URL="http://mikki-bunker.local:8000"
          export LLM_INGEST_API_KEY="${{ secrets.LLM_INGEST_API_KEY }}"
          
          echo "Analyzing PR with LLM Commit Sentry..."
          python -m src.governance.llm_commit_sentry \
            --mode analyze_pr \
            --pr_data_file /tmp/pr_data.json \
            --pr_diff_file /tmp/pr_diff.txt \
            --output_file /tmp/analysis_output.json \
            --llm-server "$LLM_INGEST_SERVER_URL" \
            --llm-api-key "$LLM_INGEST_API_KEY"
          
          # Extract the important fields for GitHub Actions
          RECOMMENDATION=$(cat /tmp/analysis_output.json | jq -r '.recommendation')
          RISK_LEVEL=$(cat /tmp/analysis_output.json | jq -r '.risk_level')
          
          echo "recommendation=${RECOMMENDATION}" >> $GITHUB_OUTPUT
          echo "risk_level=${RISK_LEVEL}" >> $GITHUB_OUTPUT
          
          # Store the full analysis for later use
          cat /tmp/analysis_output.json
      
      - name: Apply Labels Based on Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          RECOMMENDATION: ${{ steps.llm_analysis.outputs.recommendation }}
          RISK_LEVEL: ${{ steps.llm_analysis.outputs.risk_level }}
        run: |
          echo "Applying labels based on analysis..."
          
          # Remove any existing status labels
          gh pr edit ${PR_NUMBER} --remove-label "approved" || true
          gh pr edit ${PR_NUMBER} --remove-label "needs_review" || true
          gh pr edit ${PR_NUMBER} --remove-label "rejected" || true
          
          # Apply new label based on recommendation
          if [ "$RECOMMENDATION" == "approve" ]; then
            gh pr edit ${PR_NUMBER} --add-label "approved"
          elif [ "$RECOMMENDATION" == "needs_review" ]; then
            gh pr edit ${PR_NUMBER} --add-label "needs_review"
          elif [ "$RECOMMENDATION" == "reject" ]; then
            gh pr edit ${PR_NUMBER} --add-label "rejected"
          fi
          
          # Apply risk level label
          gh pr edit ${PR_NUMBER} --remove-label "risk:low" || true
          gh pr edit ${PR_NUMBER} --remove-label "risk:medium" || true
          gh pr edit ${PR_NUMBER} --remove-label "risk:high" || true
          
          gh pr edit ${PR_NUMBER} --add-label "risk:${RISK_LEVEL}"
      
      - name: Post Analysis as Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        run: |
          echo "Posting analysis as PR comment..."
          
          # Create a formatted comment
          cat > /tmp/comment.md << EOF
          ## 🔍 Governance Analysis
          
          $(cat /tmp/analysis_output.json | jq -r '.analysis_summary')
          
          ### Findings
          
          $(cat /tmp/analysis_output.json | jq -r '.analysis_details')
          
          ### Recommendation
          
          **$(cat /tmp/analysis_output.json | jq -r '.recommendation | ascii_upcase')**
          
          Risk Level: **$(cat /tmp/analysis_output.json | jq -r '.risk_level')**
          
          <details>
          <summary>Show full analysis</summary>
          
          \`\`\`json
          $(cat /tmp/analysis_output.json)
          \`\`\`
          </details>
          
          ---
          _Analysis performed by Origin LLM Governance System_
          EOF
          
          # Post the comment to the PR
          gh pr comment ${PR_NUMBER} --body-file /tmp/comment.md
      
      - name: Process Based on Recommendation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          RECOMMENDATION: ${{ steps.llm_analysis.outputs.recommendation }}
          PR_AUTHOR: ${{ env.PR_AUTHOR }}
        run: |
          echo "Processing PR based on recommendation: $RECOMMENDATION"
          
          if [ "$RECOMMENDATION" == "approve" ]; then
            # For Origin repository, we still need Mikael's approval
            if [ "$PR_AUTHOR" == "dnd-genesis" ] || [ "$PR_AUTHOR" == "dnd-singularity" ]; then
              echo "Automated PR from a bot account - requiring Mikael's review"
              gh pr edit ${PR_NUMBER} --add-reviewer "mikkihugo"
            else
              echo "PR requires manual review according to governance rules"
            fi
          elif [ "$RECOMMENDATION" == "needs_review" ]; then
            # Always require Mikael's review for PRs needing review
            gh pr edit ${PR_NUMBER} --add-reviewer "mikkihugo"
          elif [ "$RECOMMENDATION" == "reject" ]; then
            # Add explanation for rejection
            REJECTION_REASON=$(cat /tmp/analysis_output.json | jq -r '.rejection_reasons[0]')
            
            cat > /tmp/rejection.md << EOF
            ## ❌ Automated Rejection
            
            This PR has been automatically rejected by the governance system for the following reason:
            
            > $REJECTION_REASON
            
            Please address these issues before resubmitting. See the full analysis in the comments above.
            
            ---
            _This is an automated message from the Origin Governance System_
            EOF
            
            gh pr comment ${PR_NUMBER} --body-file /tmp/rejection.md
          fi