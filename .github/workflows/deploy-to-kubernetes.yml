name: Deploy Origin to Kubernetes

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'kubernetes/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-to-kubernetes.yml'
  
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'vultr'
        type: choice
        options:
          - vultr
          - aws
          - gcp
          - azure
      reset_database:
        description: 'Reset database'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.vultr.dndnordic.com
  IMAGE_NAME: origin
  KUBERNETES_NAMESPACE: governance-system

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Vultr Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.VULTR_REGISTRY_USERNAME }}
          password: ${{ secrets.VULTR_REGISTRY_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_VULTR }}

      - name: Create secrets file
        env:
          GITHUB_TOKEN_BASE64: ${{ secrets.GITHUB_TOKEN_BASE64 }}
          GITHUB_WEBHOOK_SECRET_BASE64: ${{ secrets.GITHUB_WEBHOOK_SECRET_BASE64 }}
          MIKAEL_AUTH_TOKEN_BASE64: ${{ secrets.MIKAEL_AUTH_TOKEN_BASE64 }}
          DND_GENESIS_GITHUB_TOKEN_BASE64: ${{ secrets.DND_GENESIS_GITHUB_TOKEN_BASE64 }}
          GITHUB_RUNNER_TOKEN_BASE64: ${{ secrets.GITHUB_RUNNER_TOKEN_BASE64 }}
          TAILSCALE_AUTH_KEY_BASE64: ${{ secrets.TAILSCALE_AUTH_KEY_BASE64 }}
          MIKAEL_WSL_HOST_BASE64: ${{ secrets.MIKAEL_WSL_HOST_BASE64 }}
          MIKAEL_WSL_PORT_BASE64: ${{ secrets.MIKAEL_WSL_PORT_BASE64 }}
          MIKAEL_WSL_USER_BASE64: ${{ secrets.MIKAEL_WSL_USER_BASE64 }}
          MIKAEL_SSH_KEY_BASE64: ${{ secrets.MIKAEL_SSH_KEY_BASE64 }}
          VULTR_REGISTRY_AUTH_BASE64: ${{ secrets.VULTR_REGISTRY_AUTH_BASE64 }}
          VULTR_REGISTRY_CONFIG_BASE64: ${{ secrets.VULTR_REGISTRY_CONFIG_BASE64 }}
        run: |
          # Generate secrets.yaml from template with real values
          echo "Creating secrets file with environment variables..."
          envsubst < kubernetes/secrets.yaml > /tmp/secrets.yaml

      - name: Create Docker registry secret
        run: |
          # Create registry credentials for Kubernetes
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret docker-registry vultr-registry-credentials \
            --namespace=${{ env.KUBERNETES_NAMESPACE }} \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.VULTR_REGISTRY_USERNAME }} \
            --docker-password=${{ secrets.VULTR_REGISTRY_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes secrets
        run: |
          kubectl apply -f /tmp/secrets.yaml
          rm /tmp/secrets.yaml  # Clean up the secrets file

      - name: Deploy to Kubernetes
        run: |
          # Deploy using kustomize with the appropriate cloud provider
          CLOUD_PROVIDER=${{ github.event.inputs.environment || 'vultr' }}
          echo "Deploying to $CLOUD_PROVIDER..."
          kubectl apply -k kubernetes/cloud-providers/$CLOUD_PROVIDER/

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          kubectl rollout status deployment/origin -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=120s
          
          echo "Checking services..."
          kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }}
          
          echo "Deployment complete!"
          echo "Access the API at: https://origin-api.dndnordic.com"